@using Nop.Web.Framework;
@model Nop.Plugin.Misc.PricePerStore.ViewModels.PricePerStoreViewModel
<script>
    // element ids
    var availableForPreOrderElemId = "@Html.FieldIdFor(model => model.Record.StoreAvailableForPreOrder)"
    var callForPriceElemId = "@Html.FieldIdFor(model => model.Record.StoreCallForPrice)"
    var customerEntersPriceElemId = "@Html.FieldIdFor(model => model.Record.StoreCustomerEntersPrice)"
    var disableBuyButtonElemId = "@Html.FieldIdFor(model => model.Record.StoreDisableBuyButton)"
    var disableWishlistButtonElemId = "@Html.FieldIdFor(model => model.Record.StoreDisableWishlistButton)"
    var isTaxExemptElemId = "@Html.FieldIdFor(model => model.Record.StoreIsTaxExempt)"
    var isTelecommunicationsOrBroadcastingOrElectronicServicesElemId = "@Html.FieldIdFor(model => model.Record.StoreIsTelecommunicationsOrBroadcastingOrElectronicServices)"
    var oldPriceElemId = "@Html.FieldIdFor(model => model.Record.StoreOldPrice)"
    var priceElemId = "@Html.FieldIdFor(model => model.Record.StorePrice)"
    var productCostElemId = "@Html.FieldIdFor(model => model.Record.StoreProductCost)"
    var specialPriceElemId = "@Html.FieldIdFor(model => model.Record.StoreSpecialPrice)"
    var specialPriceEndDateTimeUtcElemId = "@Html.FieldIdFor(model => model.Record.StoreSpecialPriceEndDateTimeUtc)"
    var specialPriceStartDateTimeUtcElemId = "@Html.FieldIdFor(model => model.Record.StoreSpecialPriceStartDateTimeUtc)"
    var data = @Html.Raw(Model.StoresJson)
    var storeId = data[0].Id;
    var productId = "@Model.Record.StoreProductId";
    function onSelect(e)
    {
        var dataItem = this.dataItem(e.item.index());
        storeId = dataItem.Id;
        $.ajax({
            cache: false,
            type: "POST",
            url: "@(Url.Action("GetProductFieldsByStore", "PricePerStore"))",
            data: {"productId": @Model.Record.StoreProductId, "storeId": dataItem.Id },
            success: function(data)
            {
                setTitle(data.Id!=0);
                $('#alertBoxId').hide();
                setFieldsAfterAjax(data);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to load prices fields');
            }
        });
    }

    function setFieldsAfterAjax(data)
    {
        $('#'+priceElemId).data('kendoNumericTextBox').value(data.StorePrice);
        $('#'+availableForPreOrderElemId).prop('checked',data.StoreAvailableForPreOrder ? 'checked' :'');
        $('#'+callForPriceElemId).prop('checked',data.StoreCallForPrice ? 'checked' :'');
        $('#'+customerEntersPriceElemId).prop('checked',data.StoreCustomerEntersPrice ? 'checked' : '');
        $('#'+disableBuyButtonElemId).prop('checked',data.StoreDisableBuyButton ? 'checked' : '');
        $('#'+disableWishlistButtonElemId).prop('checked',data.StoreDisableWishlistButton ? 'checked' : '');
        $('#'+isTaxExemptElemId).prop('checked',data.StoreIsTaxExempt ? 'checked' : '');
        $('#'+isTelecommunicationsOrBroadcastingOrElectronicServicesElemId).prop('checked',data.StoreIsTelecommunicationsOrBroadcastingOrElectronicServices ? 'checked' : '');
        $('#'+oldPriceElemId).data('kendoNumericTextBox').value(data.StoreOldPrice);
        $('#'+productCostElemId).data('kendoNumericTextBox').value(data.StoreProductCost);
        $('#'+specialPriceElemId).data('kendoNumericTextBox').value(data.StoreSpecialPrice);
        $('#'+specialPriceEndDateTimeUtcElemId).data('kendoDateTimePicker').value(data.StoreSpecialPriceEndDateTimeUtc);
        $('#'+specialPriceStartDateTimeUtcElemId).data('kendoDateTimePicker').value(data.StoreSpecialPriceStartDateTimeUtc);
    }

    function setTitle(isNew)
    {
        if (isNew==false)
        {
            $('#titleId').html('Add price per store');
            $('#removeProductStorePrice').hide();
        }
        else
        {
            $('#titleId').html('Update price per store');
            $('#removeProductStorePrice').show();
        }
    }

    $(document).ready(function () {
        setTitle(@Model.Record.Id != 0);
        $('#alertBoxId').hide();
        $('#storesId').kendoComboBox({
            dataTextField: "Name",
            dataValueField: "Id",
            dataSource: data,
            select: onSelect,
            filter: "contains",
            suggest: true,
            index: 0
        });
        var fabric = $("#storesId").data("kendoComboBox");

        fabric.input.attr("readonly", true)
                .on("keydown", function(e) {
                    if (e.keyCode === 8) {
                        e.preventDefault();
                    }
                });
        $('#addProductStorePrice').click(function (e) {
            e.preventDefault();
            var availableForPreOrder = $("#"+availableForPreOrderElemId).prop('checked');
            var callForPrice = $("#"+callForPriceElemId).prop('checked');
            var customerEntersPrice = $("#"+customerEntersPriceElemId).prop('checked');
            var disableBuyButton = $("#"+disableBuyButtonElemId).prop('checked');
            var disableWishlistButton = $("#"+disableWishlistButtonElemId).prop('checked');
            var isTaxExempt = $("#"+isTaxExemptElemId).prop('checked');
            var isTelecommunicationsOrBroadcastingOrElectronicServices = $("#"+isTelecommunicationsOrBroadcastingOrElectronicServicesElemId).prop('checked');
            var oldPrice = $("#"+oldPriceElemId).val();
            var price = $("#"+priceElemId).val();
            var productCost = $("#"+productCostElemId).val();
            var specialPrice = $("#"+specialPriceElemId).val();
            var specialPriceEndDateTimeUtc = $("#"+specialPriceEndDateTimeUtcElemId).val();
            var specialPriceStartDateTimeUtc = $("#"+specialPriceStartDateTimeUtcElemId).val();
            $('#addProductStorePrice').attr('disabled', true);
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("CreateUpdatePricePerStore", "PricePerStore"))",
                data: {
                    "StoreAvailableForPreOrder": availableForPreOrder, "StoreCallForPrice": callForPrice, "StoreCustomerEntersPrice": customerEntersPrice,
                    "StoreDisableBuyButton": disableBuyButton, "StoreDisableWishlistButton": disableWishlistButton,
                    "StoreIsTaxExempt": isTaxExempt, "StoreIsTelecommunicationsOrBroadcastingOrElectronicServices": isTelecommunicationsOrBroadcastingOrElectronicServices, "StoreOldPrice": oldPrice,
                    "StorePrice": price, "StoreProductCost": productCost, "StoreProductId": productId, "StoreSpecialPrice": specialPrice, "StoreCallForPrice": callForPrice,
                    "StoreSpecialPriceEndDateTimeUtc": specialPriceEndDateTimeUtc, "StoreSpecialPriceStartDateTimeUtc": specialPriceStartDateTimeUtc, "StoreId": storeId,
                },
                success: function (data) {
                    $('#addProductStorePrice').attr('disabled', false);
                    setTitle(true);
                    $('#alertBoxId').show();
                    $('#alertBoxId').html('Prices per store saved Successfully!');
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to add product picture.');
                    $('#addProductStorePrice').attr('disabled', false);
                }
            });
            return false;
        });

        $('#removeProductStorePrice').click(function(e){
            $.ajax({
                cache:false,
                type:"POST",
                url:'@(Url.Action("RemovePricePerStore","PricePerStore"))',
                data:{storeId: storeId,productId:productId},
                success: function(data){
                    setTitle(false);
                    $('#alertBoxId').html('Prices per store removed Successfully!');
                    setFieldsAfterAjax(data);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to add product picture.');
                    $('#alertBoxId').show();
                    $('#addProductStorePrice').attr('disabled', false);
                }
            });
        })
    });
    //# sourceURL=dynamicScript2.js
</script>
<label>Stores:</label><input style="margin-left:7px" id="storesId" />

<div id="alertBoxId" class="message-box message-box-success"></div>
    <fieldset>
        <legend>
            <strong id="titleId">Update Price per store</strong>
        </legend>
        <table class="adminContent">
            <tr>
                <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreOldPrice):</td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Record.StoreOldPrice)
                    @Html.ValidationMessageFor(model => model.Record.StoreOldPrice)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StorePrice):</td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Record.StorePrice)
                    @Html.ValidationMessageFor(model => model.Record.StorePrice)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreProductCost):</td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Record.StoreProductCost)
                    @Html.ValidationMessageFor(model => model.Record.StoreProductCost)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreSpecialPrice):</td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Record.StoreSpecialPrice)
                    @Html.ValidationMessageFor(model => model.Record.StoreSpecialPrice)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreSpecialPriceEndDateTimeUtc):</td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Record.StoreSpecialPriceEndDateTimeUtc)
                    @Html.ValidationMessageFor(model => model.Record.StoreSpecialPriceEndDateTimeUtc)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreSpecialPriceStartDateTimeUtc):</td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Record.StoreSpecialPriceStartDateTimeUtc)
                    @Html.ValidationMessageFor(model => model.Record.StoreSpecialPriceStartDateTimeUtc)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreAvailableForPreOrder):</td>
                <td class="adminData">
                    @Html.CheckBoxFor(model => model.Record.StoreAvailableForPreOrder)
                    @Html.ValidationMessageFor(model => model.Record.StoreAvailableForPreOrder)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreCallForPrice):</td>
                <td class="adminData">
                    @Html.CheckBoxFor(model => model.Record.StoreCallForPrice)
                    @Html.ValidationMessageFor(model => model.Record.StoreCallForPrice)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreCustomerEntersPrice):</td>
                <td class="adminData">
                    @Html.CheckBoxFor(model => model.Record.StoreCustomerEntersPrice)
                    @Html.ValidationMessageFor(model => model.Record.StoreCustomerEntersPrice)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreDisableBuyButton):</td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Record.StoreDisableBuyButton)
                    @Html.ValidationMessageFor(model => model.Record.StoreDisableBuyButton)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreDisableWishlistButton):</td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Record.StoreDisableWishlistButton)
                    @Html.ValidationMessageFor(model => model.Record.StoreDisableWishlistButton)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreIsTaxExempt):</td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Record.StoreIsTaxExempt)
                    @Html.ValidationMessageFor(model => model.Record.StoreIsTaxExempt)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreIsTelecommunicationsOrBroadcastingOrElectronicServices):</td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Record.StoreIsTelecommunicationsOrBroadcastingOrElectronicServices)
                    @Html.ValidationMessageFor(model => model.Record.StoreIsTelecommunicationsOrBroadcastingOrElectronicServices)
                </td>
            </tr>
            <tr>
        </table>
    </fieldset>
    <br />
    <table class="adminContent">
        <tr>
            <td colspan="2">
                <input type="button" id="addProductStorePrice" name="save" class="k-button" value="Save" />
                <input type="button" id="removeProductStorePrice" name="remove" class="k-button" value="Remove" />
            </td>
        </tr>
    </table>