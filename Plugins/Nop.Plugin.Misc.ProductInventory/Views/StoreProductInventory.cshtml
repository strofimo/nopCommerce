@using Nop.Core.Domain.Catalog;
@model Nop.Plugin.Misc.ProductInventory.ViewModels.StoreProductInventoryViewModel
<label>Stores:</label><input style="margin-left:7px" id="storesId" />
<div id="successStockAlertBoxId" class="message-box message-box-success"></div>
<div id="errorStockAlertBoxId" class="validation-summary-errors"></div>
<fieldset>
    <legend>
        <strong id="stocktitleId">Update Stock per store</strong>
    </legend>
    <table class="adminContent">
        <tr>
            <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreWarehouseId):</td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Record.StoreWarehouseId,Model.WarehouseList)
                @Html.ValidationMessageFor(model => model.Record.StoreWarehouseId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreStockQuantity):</td>
            <td class="adminData">
                @Html.EditorFor(model => model.Record.StoreStockQuantity)
                @Html.ValidationMessageFor(model => model.Record.StoreStockQuantity)
            </td>
        </tr>      
        <tr>
            <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreDisplayStockAvailability):</td>
            <td class="adminData">
                @Html.CheckBoxFor(model => model.Record.StoreDisplayStockAvailability)
                @Html.ValidationMessageFor(model => model.Record.StoreDisplayStockAvailability)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreDisplayStockQuantity):</td>
            <td class="adminData">
                @Html.CheckBoxFor(model => model.Record.StoreDisplayStockQuantity)
                @Html.ValidationMessageFor(model => model.Record.StoreDisplayStockQuantity)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreMinStockQuantity):</td>
            <td class="adminData">
                @Html.EditorFor(model => model.Record.StoreMinStockQuantity)
                @Html.ValidationMessageFor(model => model.Record.StoreMinStockQuantity)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreLowStockActivityId):</td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Record.StoreLowStockActivityId, ((LowStockActivity)Model.Record.StoreLowStockActivityId).ToSelectList())
                @Html.ValidationMessageFor(model => model.Record.StoreLowStockActivityId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreNotifyAdminForQuantityBelow):</td>
            <td class="adminData">
                @Html.EditorFor(model => model.Record.StoreNotifyAdminForQuantityBelow)
                @Html.ValidationMessageFor(model => model.Record.StoreNotifyAdminForQuantityBelow)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreBackorderModeId):</td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.Record.StoreBackorderModeId, ((BackorderMode)Model.Record.StoreBackorderModeId).ToSelectList())
                @Html.ValidationMessageFor(model => model.Record.StoreBackorderModeId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreAllowBackInStockSubscriptions):</td>
            <td class="adminData">
                @Html.CheckBoxFor(model => model.Record.StoreAllowBackInStockSubscriptions)
                @Html.ValidationMessageFor(model => model.Record.StoreBackorderModeId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreOrderMinimumQuantity):</td>
            <td class="adminData">
                @Html.EditorFor(model => model.Record.StoreOrderMinimumQuantity)
                @Html.ValidationMessageFor(model => model.Record.StoreOrderMinimumQuantity)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreOrderMaximumQuantity):</td>
            <td class="adminData">
                @Html.EditorFor(model => model.Record.StoreOrderMaximumQuantity)
                @Html.ValidationMessageFor(model => model.Record.StoreOrderMaximumQuantity)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">@Html.NopLabelFor(model => model.Record.StoreAllowedQuantities):</td>
            <td class="adminData">
                @Html.EditorFor(model => model.Record.StoreAllowedQuantities)
                @Html.ValidationMessageFor(model => model.Record.StoreAllowedQuantities)
            </td>
        </tr>
        <tr>
    </table>
</fieldset>
<br />
<table class="adminContent">
    <tr>
        <td colspan="2">
            <input type="button" id="addStockStorePrice" name="save" class="k-button" value="Save" />
            <input type="button" id="removeStockStorePrice" name="remove" class="k-button" value="Remove" />
        </td>
    </tr>
</table>
<script>
    // element ids
    var storeWarehouseIdElemId = "@Html.FieldIdFor(model => model.Record.StoreWarehouseId)"
    var storeStockQuantityElemId = "@Html.FieldIdFor(model => model.Record.StoreStockQuantity)"
    var storeDisplayStockAvailabilityElemId = "@Html.FieldIdFor(model => model.Record.StoreDisplayStockAvailability)"
    var storeMinStockQuantityElemId = "@Html.FieldIdFor(model => model.Record.StoreMinStockQuantity)"
    var storeLowStockActivityIdElemId = "@Html.FieldIdFor(model => model.Record.StoreLowStockActivityId)"
    var storeNotifyAdminForQuantityBelowElemId = "@Html.FieldIdFor(model => model.Record.StoreNotifyAdminForQuantityBelow)"
    var storeBackorderModeIdElemId = "@Html.FieldIdFor(model => model.Record.StoreBackorderModeId)"
    var storeOrderMinimumQuantityElemId = "@Html.FieldIdFor(model => model.Record.StoreOrderMinimumQuantity)"
    var storeOrderMaximumQuantityElemId = "@Html.FieldIdFor(model => model.Record.StoreOrderMaximumQuantity)"
    var storeAllowedQuantitiesElemId = "@Html.FieldIdFor(model => model.Record.StoreAllowedQuantities)"
    var storeDisplayStockQuantityElemId="@Html.FieldIdFor(model => model.Record.StoreDisplayStockQuantity)"
    var storeAllowBackInStockSubscriptionsElemId="@Html.FieldIdFor(model => model.Record.StoreAllowBackInStockSubscriptions)"
    var data = @Html.Raw(Model.StoresJson);
    var storeId = data[0].Id;
    var productId = "@Model.Record.ProductId";

    function onSelect(e)
    {
        var dataItem = this.dataItem(e.item.index());
        storeId = dataItem.Id;
        $.ajax({
            cache: false,
            type: "POST",
            url: "@(Url.Action("GetStockFieldsByStore", "StoreProductInventory"))",
            data: {"productId": productId, "storeId": dataItem.Id },
            success: function(data)
            {
                setTitle(data.Id!=0);
                $('#successStockAlertBoxId').hide();
                $('#errorStockAlertBoxId').hide();
                setFieldsAfterAjax(data);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to load prices fields');
            }
        });
    }

    function setFieldsAfterAjax(data)
    {
        $('#'+storeWarehouseIdElemId).val(data.StoreWarehouseId);
        $('#'+storeStockQuantityElemId).data('kendoNumericTextBox').value(data.StoreStockQuantity);
        $('#'+storeDisplayStockAvailabilityElemId).prop('checked',data.StoreDisplayStockAvailability ? 'checked' :'');
        $('#'+storeMinStockQuantityElemId).prop('checked',data.StoreMinStockQuantity ? 'checked' : '');
        $('#'+storeLowStockActivityIdElemId).val(data.StoreLowStockActivityId);
        $('#'+storeNotifyAdminForQuantityBelowElemId).data('kendoNumericTextBox').value(data.StoreNotifyAdminForQuantityBelow);
        $('#'+storeBackorderModeIdElemId).val(data.StoreBackorderModeId);
        $('#'+storeOrderMinimumQuantityElemId).data('kendoNumericTextBox').value(data.StoreOrderMinimumQuantity);
        $('#'+storeOrderMaximumQuantityElemId).data('kendoNumericTextBox').value(data.StoreOrderMaximumQuantity);
        $('#'+storeAllowedQuantitiesElemId).val(data.StoreAllowedQuantities);

        $('#'+storeDisplayStockQuantityElemId).prop('checked',data.StoreDisplayStockQuantity ? 'checked' : '');
        $('#'+storeAllowBackInStockSubscriptionsElemId).prop('checked',data.StoreAllowBackInStockSubscriptions ? 'checked' : '');

    }

    function setTitle(isNew)
    {
        if (isNew==false)
        {
            $('#stocktitleId').html('Add stock per store');
            $('#removeStockStorePrice').hide();
        }
        else
        {
            $('#titleId').html('Update stock per store');
            $('#removeStockStorePrice').show();
        }
    }

    $(document).ready(function () {
        setTitle(@Model.Record.Id != 0);
        $('#errorStockAlertBoxId').hide();
        $('#successStockAlertBoxId').hide();
        $('#storesId').kendoComboBox({
            dataTextField: "Name",
            dataValueField: "Id",
            dataSource: data,
            select: onSelect,
            filter: "contains",
            suggest: true,
            index: 0
        });
        var fabric = $("#storesId").data("kendoComboBox");

        fabric.input.attr("readonly", true)
                .on("keydown", function(e) {
                    if (e.keyCode === 8) {
                        e.preventDefault();
                    }
                });
        $('#addStockStorePrice').click(function (e) {
            e.preventDefault();
            var storeWarehouseId = $("#"+storeWarehouseIdElemId).val();
            var storeStockQuantity = $("#"+storeStockQuantityElemId).val();
            var storeDisplayStockAvailability = $("#"+storeDisplayStockAvailabilityElemId).prop('checked');
            var storeMinStockQuantity = $("#"+storeMinStockQuantityElemId).val();
            var storeLowStockActivityId = $("#"+storeLowStockActivityIdElemId).val();
            var storeNotifyAdminForQuantityBelow = $("#"+storeNotifyAdminForQuantityBelowElemId).val();
            var storeAllowedQuantities = $("#"+storeAllowedQuantitiesElemId).val();
            var storeBackorderModeId = $("#"+storeBackorderModeIdElemId).val();
            var storeOrderMinimumQuantity = $("#"+storeOrderMinimumQuantityElemId).val();
            var storeOrderMaximumQuantity = $("#"+storeOrderMaximumQuantityElemId).val();
            var storeDisplayStockQuantity = $("#"+storeDisplayStockQuantityElemId).prop('checked');
            var storeAllowBackInStockSubscriptions = $("#"+storeAllowBackInStockSubscriptionsElemId).prop('checked');
            $('#addStockStorePrice').attr('disabled', true);
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("CreateUpdateStockPerStore", "StoreProductInventory"))",
                data: {
                    "StoreWarehouseId": storeWarehouseId, "StoreStockQuantity": storeStockQuantity, "StoreDisplayStockAvailability": storeDisplayStockAvailability,
                    "StoreMinStockQuantity": storeMinStockQuantity, "StoreLowStockActivityId": storeLowStockActivityId,
                    "StoreNotifyAdminForQuantityBelow": storeNotifyAdminForQuantityBelow, "StoreAllowedQuantities": storeAllowedQuantities, "StoreBackorderModeId": storeBackorderModeId,
                    "StoreOrderMinimumQuantity": storeOrderMinimumQuantity, "StoreOrderMaximumQuantity": storeOrderMaximumQuantity, "ProductId": productId, "StoreDisplayStockQuantity": storeDisplayStockQuantity,
                    "StoreAllowBackInStockSubscriptions": storeAllowBackInStockSubscriptions,"StoreId": storeId,
                },
                success: function (data) {
                    $('#addStockStorePrice').attr('disabled', false);
                    setTitle(true);

                    $('#errorStockAlertBoxId').hide();
                    $('#successStockAlertBoxId').show();
                    $('#successStockAlertBoxId').html('Stock per store saved Successfully!');
                },
                error: function (response) {
                    $('#addStockStorePrice').attr('disabled', false);
                    var errorHtml='<ul>';
                    $.each(response.responseJSON.errors,function(){
                        errorHtml+="<li>"+this+"</li>"
                    });
                    errorHtml+='</ul>';
                    $('#errorStockAlertBoxId').html(errorHtml);
                    $('#errorStockAlertBoxId').show();
                    $('#successStockAlertBoxId').hide();
                }
            });
            return false;
        });

        $('#removeStockStorePrice').click(function(e){
            $.ajax({
                cache:false,
                type:"POST",
                url:'@(Url.Action("RemoveStockPerStore", "StoreProductInventory"))',
                data:{storeId: storeId,productId:productId},
                success: function(data){
                    setTitle(false);
                    $('#alertBoxId').html('Prices per store removed Successfully!');
                    setFieldsAfterAjax(data);
                },
                error: function (response) {

                    $('#addProductStorePrice').attr('disabled', false);
                }
            });
        })
    });
    //# sourceURL=stockScript.js
</script>